树
    结点的度
        包含子树的个数
    树的度
        所有结点的度的最大值（不一定是根结点最大）
    树的高度
        最大层次
    孩子结点
    双亲结点（父节点）
    兄弟结点

遍历规则
    根据根结点被访问的顺序分为：
        前序遍历
            根结点->左子树->右子树
        中序遍历
            左子树->根结点->右子树
        后序遍历
            左子树->右子树->根结点

二叉树的缺点是：容易形成单链表，深度太大，查找效率低

2-3查找树
    2-结点：包含一个键和两条链，左链比键小，右链比键大
    3-结点：包含两个键和三条链，左链比小键小；中链比小键大，比大键小；右链比大键大

    普通二叉树是自顶向下生长，2-3树是自底向上生长
    插入操作：
        1.向2-结点中插入新键，将2-结点转换为3-结点即可
        2.向3-结点中插入新键，将3-结点转换为临时的4-结点，再将中间键上移形成大键和小键的父节点
        3.向父节点为2-结点的3-结点中插入新键，将3-结点转换为临时4-结点，再将中间键上移形成大键和小键的父节点，
            由于父节点为2-结点，中间键与父节点转换为3-结点
        4.向父结点为3-结点的3-结点中插入新键，将3-结点转换为临时4-结点，再将中间键上移形成大键和小键的父节点，
            由于父节点为3-结点，中间键与父节点转换为临时4-结点，再将中间键上移形成大键和小键的父节点
        5.分解根结点，根结点为3-结点时，需要将中间键上移形成大键和小键的父节点

红黑树

    1.红链接为左连接
    2.没有任何一个结点同时和两条红链接相连
    3.完美黑色平衡，任意空链接到根结点的路径上的黑链接数量相同

    1.结点不是黑色就是红色
    2.根结点是黑色
    3.两个红色结点不能相连
    4.每个红色结点的两个子结点都是黑色
    5.叶子节点都是黑色
    6.叶子结点到根结点经过的黑色节点路径长度一致

    插入都是红色结点
    左旋
        情形：当前结点为红色，父结点为红色，叔叔结点为黑色，当前结点为父结点的右子结点
        步骤：
        以父结点为本结点
        本结点的右结点 = 右结点的左子结点
        右结点的左子结点 = 本结点

    右旋
        情形：当前结点为红色，父结点为红色，叔叔结点为黑色，当前结点为父结点的左子结点
        步骤：
        父结点变为黑色
        祖父结点变为红色
        以祖父结点为本结点旋转
        本结点的左结点 = 左结点的右结点
        左结点的右结点 = 本结点

    变色
        当前节点的父结点，叔叔结点为红色时，需要变色
        1.父结点->黑
        2.叔叔结点->黑
        3.祖父结点->红
        4.指针指向祖父结点，再判断变换规则

B树
    允许一个结点包含多个key
    M阶B树的特点
        每个结点最多有M-1个key，升序排列
        每个结点最多能有M个子结点
        根结点至少有两个子结点

    所有节点数据只存储一次

B+树
    B树变形
    只有叶子结点存数据，非叶子结点只存储索引
    非叶子结点存储的索引在叶子结点中都可以找到

    数据库中的应用
        主键索引树
            1.主键存在非叶子结点
            2.叶子结点中存储索引和数据
            3.叶子结点的数据使用指针连接，便于区间查询


并查集
    找到元素所在集合
    合并集合
    find
    union

