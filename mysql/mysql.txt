mysql数据库
1.为什么使用B+树
	红黑树：二叉搜索速度快，但是数据量大时，深度太大；
	B树：叶子节点具有相同的深度，叶节点的指针为空；
		所有元素不重复；
		节点中数据索引由左至右递增排列。		
	B+树：非叶子节点不存储数据，只存储索引（冗余），一个节点可以放更多的索引；
		叶子节点包含所有的索引字段；
		叶子节点用指针连接，提高区间访问性能。
			--所有叶子节点从左到右递增，使用指针连接之后,更好的支持范围查找。
		
	
	mysql索引一个节点默认为16K，非叶子节点只存储索引和指针信息（指向下一级节点地址），可以存储更多的索引；
	比如：使用bigint做索引，占8字节（8bit），+指针信息6bit，因此一个非叶子节点可以存储1000多个索引信息；
	uuid作为索引时的两个问题：
		1.uuid占16个字节，每个节点存储的索引数量少，影响查询效率；
		2.uuid不是自增的，插入可能造成索引树分裂，插入效率低；
			比较大小相对于自增id效率低。
	
2.MyISAM索引 （非聚集）
	索引文件和数据文件是分离的
	.myd文件存储数据
	.myi文件存储索引
	叶子节点存储索引和对应的磁盘文件地址指针，对应.myd文件中的数据
3.InnoDB索引 （聚集）
	表数据文件本身就是按B+树组织的一个索引结构文件；索引和数据存在同一个文件中。
	聚集索引（聚簇索引）--叶子节点包含了完整的数据记录。
	
	为什么InnoDB表必须有主键，并且推荐使用整型的自增主键？
	需要根据主键索引创建索引结构文件。

4.索引方式：BTREE和Hash
	精确查找时使用Hash
	范围查找使用BTREE

5.联合索引存储结构
	
	
	
	