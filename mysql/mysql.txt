mysql数据库
1.为什么使用B+树
	红黑树：二叉搜索速度快，但是数据量大时，深度太大；
	B树：叶子节点具有相同的深度，叶节点的指针为空；
		所有元素不重复；
		节点中数据索引由左至右递增排列。		
	B+树：非叶子节点不存储数据，只存储索引（冗余），一个节点可以放更多的索引；
		叶子节点包含所有的索引字段；
		叶子节点用指针连接，提高区间访问性能。
			--所有叶子节点从左到右递增，使用指针连接之后,更好的支持范围查找。
		
	
	mysql索引一个节点默认为16K，非叶子节点只存储索引和指针信息（指向下一级节点地址），可以存储更多的索引；
	比如：使用bigint做索引，占8字节（8bit），+指针信息6bit，因此一个非叶子节点可以存储1000多个索引信息；
	uuid作为索引时的两个问题：
		1.uuid占16个字节，每个节点存储的索引数量少，影响查询效率；
		2.uuid不是自增的，插入可能造成索引树分裂，插入效率低；
			比较大小相对于自增id效率低。
	
2.MyISAM索引 （非聚集）
	索引文件和数据文件是分离的
	.myd文件存储数据
	.myi文件存储索引
	叶子节点存储索引和对应的磁盘文件地址指针，对应.myd文件中的数据
3.InnoDB索引 （聚集）
	表数据文件本身就是按B+树组织的一个索引结构文件；索引和数据存在同一个文件中。
	聚集索引（聚簇索引）--叶子节点包含了完整的数据记录。
	
	为什么InnoDB表必须有主键，并且推荐使用整型的自增主键？
	需要根据主键索引创建索引结构文件。
	如果没有显示指定主键，mysql会选择非空唯一的字段作为主键，
		如果没有则会创建隐含索引，长度为6，类型为长整型。
	其他辅助索引需要检索两遍才可以拿到数据，辅助索引叶子节点存储的是主键id，再到主键索引树中检索数据。
	
	回表查询：MyISAM都需要根据地址指针，再次寻址
			InnoDB的普通索引也需要根据找到的主键id，再次在主键索引中搜索数据。
	覆盖索引：InnoDB的普通索引，如果建成联合索引，且联合索引字段包含了所有需要查询到的字段，
				则不需要再次在主键索引中搜索数据。
			
			不要使用select *  、计数时使用count(索引列）

4.索引方式：BTREE和Hash
	精确查找时使用Hash
	范围查找使用BTREE

5.索引使用注意事项
	1）不要在列上使用函数和计算，会导致索引失效
	2）尽量避免使用!=,<>,not in,or
	3）最左前缀原则
	4）索引列范围查询会使索引右侧字段失效
	5）索引遇到null值列会失效 ，设计数据库时不能允许null为默认值
	6）索引like搜索，支持like 'xx%',不支持 like '%xx%'
	7）搜索字段类型与表字段类型一致，否则会造成索引失效

6.事务的属性   ACID
	原子性  Atomic
	一致性  Consistent
	隔离性  Isolation
	持久性  Durable
	
	事务的隔离级别：
		读未提交：读到其他事务未提交的数据  造成脏读
		读已提交：读取到其他事务提交的<修改> 数据，造成一次事务中多次读取结果不一致；造成不可重复读
		可重复读（默认）：不能读取到其他事务修改，可以读取到其他事务提交的<新增、删除>数据 ，会造成幻读
		可串行化：可以解决所有问题，但是效率低
	
	show vaiables like 'tx_isolation'  显示事务隔离级别
	set tx_isolation = 'read-uncommitted'  设置事务隔离级别
	
	MVCC (multi-version concurrency controller) 多版本并发控制
	事务中读取数据后，mysql会生成一次性视图（read-view），之后会读取快照内容。
	修改删除时，添加版本号。
	
7.数据库锁
	MyISAM表锁，适合做读操作多，写操作少的表。
	InnoDB，有索引时支持行锁。
	表锁：
	共享锁：本事务不影响读操作，不能执行写操作，不能读其他表；
			其他事务操作本表时，可以读，执行写操作时会被阻塞。
	排它锁：本事务可读可写当前表，不能读其他表；
			其他事务读、写操作阻塞
	
	lock table XX read,write  为表加锁
	unlock tables  解锁
	
	行锁：
	索引失效会导致行锁变表锁
	
	间隙锁（GAP）：使用范围条件修改数据时，会对范围内存在数据加锁，同时会对条件范围内不存在的数据也加锁。
		间隙锁会导致添加锁定范围内数据时，阻塞。
	
	读时加锁， select …… for update
	
	